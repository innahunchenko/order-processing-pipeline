AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CFN template for CSV processing pipeline: API Gateway -> Lambda -> SQS -> Lambda -> DynamoDB

Resources:

  OrdersDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrdersDLQ

  OrdersQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrdersQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrdersDLQ.Arn
        maxReceiveCount: 2

  OrdersQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrdersQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaSendReceive
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt OrdersQueue.Arn

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  CsvParserLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: csv-parser-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CsvParserSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt OrdersQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  OrderProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: order-processor-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OrderProcessorSQSDDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrdersQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt OrdersTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  CsvParserLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CsvParserLambda}"
      RetentionInDays: 14

  OrderProcessorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OrderProcessorLambda}"
      RetentionInDays: 14

  CsvParserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: csv-parser-lambda
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 60
      Role: !GetAtt CsvParserLambdaRole.Arn
      Code:
        S3Bucket: csv-parse-lambda-bucket
        S3Key: zip-lambdas/csv-parser-lambda.zip
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref OrdersQueue

  OrderProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: order-processor-lambda
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 60
      Role: !GetAtt OrderProcessorLambdaRole.Arn
      Code:
        S3Bucket: csv-parse-lambda-bucket
        S3Key: zip-lambdas/order-processor-lambda.zip
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref OrdersTable

  OrderProcessorSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt OrdersQueue.Arn
      FunctionName: !GetAtt OrderProcessorLambda.Arn
      BatchSize: 10
      Enabled: True
      FunctionResponseTypes:
        - ReportBatchItemFailures

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CsvProcessingApi
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: upload
      RestApiId: !Ref ApiGateway

  ApiGatewayMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayRootResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CsvParserLambda.Arn}/invocations

  CsvParserLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CsvParserLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/upload

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodPost
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: dev